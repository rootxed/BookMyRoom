[main]

# Let's use some in-memory caching to reduce the number of runtime lookups against a remote user store.
# A real application might want to use a more robust caching solution (e.g. ehcache or a
# distributed cache).  When using such caches, be aware of your cache TTL settings: too high
# a TTL and the cache won't reflect any potential changes in Stormpath fast enough.  Too low
# and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

passt = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter
passt.loginUrl = /login.xhtml
authc.loginUrl = /login.xhtml
logout.redirectUrl = /login.xhtml

# configure Shiro's default 'ssl' filter to be disabled while testing
ssl.enabled = false

# configure hashService, passwordService and passwordMatcher : https://stackoverflow.com/a/49907720
hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 500000
hashService.hashAlgorithmName = SHA-256
hashService.generatePublicSalt = true

#default hash algorithm is SHA-256

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService

passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

# Configure DataSource for the JdbcRealm using Shiro's JndiObjectFactory
# source: https://stackoverflow.com/a/17452503 & https://stackoverflow.com/a/49907720
dataSource = org.apache.shiro.jndi.JndiObjectFactory
dataSource.resourceName = jdbc/BookMyRoom
dataSource.resourceRef = true
dataSource.requiredType = javax.sql.DataSource
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $dataSource
jdbcRealm.credentialsMatcher = $passwordMatcher

# Configure JDBC realm SQL queries
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT password FROM user WHERE userName = ?
jdbcRealm.userRolesQuery = SELECT role.Name FROM role WHERE id = (SELECT roleID FROM user WHERE userName = ?)
# jdbcRealm.permissionsQuery = SELECT label FROM permission p WHERE p.id IN (SELECT permissionID FROM rolepermissions WHERE roleID = (SELECT id FROM role r WHERE r.label = ?));

[urls]
# / = ssl, anon
/login.xhtml = ssl, passt
/register.xhtml = ssl, anon
/test.xhtml = ssl, authc
/logout = ssl, logout
/javax.faces.resource/** = ssl, anon

# Order matters: define your filter chains based on a FIRST MATCH WINS policy! See warning at : https://shiro.apache.org/web.html#urls-
# uncomment these restrictions for production release
